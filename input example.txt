Graph* g = new Graph();
	pair<Node*, int> s;
	s.first = new Node();
	s.first->name = "S";
	pair<Node*, int> a;
	a.first = new Node();
	a.first->name = "A";
	pair<Node*, int> b;
	b.first = new Node();
	b.first->name = "B";
	pair<Node*, int> c;
	c.first = new Node();
	c.first->name = "C";
	pair<Node*, int> d;
	d.first = new Node();
	d.first->name = "D";
	pair<Node*, int> e;
	e.first = new Node();
	e.first->name = "E";
	pair<Node*, int> f;
	f.first = new Node();
	f.first->name = "F";
	pair<Node*, int> h;
	h.first = new Node();
	h.first->name = "H";


	s.first->neighbors.push_back(a);
	s.first->neighbors.push_back(b);
	s.first->neighbors.push_back(c);
	s.first->neighbors.begin().operator*().second = 33;
	list <std::pair<Node*, int>> ::iterator it2 = s.first->neighbors.begin();
	it2++;
	it2.operator*().second = 8;
	it2++;
	it2.operator*().second = 10;

	c.first->neighbors.push_back(d);
	c.first->neighbors.begin().operator*().second = 6;
	b.first->neighbors.push_back(d);
	b.first->neighbors.begin().operator*().second = 12;
	c.first->neighbors.push_back(h);
	c.first->neighbors.push_back(f);
	list <std::pair<Node*, int>> ::iterator it = c.first->neighbors.begin();
	it++;
	it.operator*().second = 13;
	it++;
	it.operator*().second = 9;
	d.first->neighbors.push_back(h);
	d.first->neighbors.begin().operator*().second = 5;
	h.first->neighbors.push_back(f);
	h.first->neighbors.begin().operator*().second = 6;
	f.first->neighbors.push_back(a);
	f.first->neighbors.push_back(e);
	it = f.first->neighbors.begin();
	it.operator*().second = 3;
	it++;
	it.operator*().second = 25;
	a.first->neighbors.push_back(e);
	a.first->neighbors.begin().operator*().second = 11;


	g->allnodes.push_back(s);
	g->allnodes.push_back(a);
	g->allnodes.push_back(b);
	g->allnodes.push_back(c);
	g->allnodes.push_back(d);
	g->allnodes.push_back(e);
	g->allnodes.push_back(f);
	g->allnodes.push_back(h);